/**
 * Orthanc - A Lightweight, RESTful DICOM Store
 * Copyright (C) 2012-2016 Sebastien Jodogne, Medical Physics
 * Department, University Hospital of Liege, Belgium
 * Copyright (C) 2017-2018 Osimis S.A., Belgium
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 **/

/*
By Martin Leipert
martin.leipert@fau.de

Written for the University of La Serena
for the extension of Orthanc with SSO

Includes some static and dynamic ressources into Orthanc explorer by html / javascript

Ressources/OrthancExplorer.js -> Add content dynamically

Ressources/PriviledgeAdministration -> Add static content (html)

To compile this Project needs to be located in the Plugins folder of the Orthanc Project
as it is based on the Orthanc Base Plugin
*/


// Boost
#include <boost/filesystem.hpp>

// Include json
#include <json/value.h>
#include <json/reader.h>

// C++ Standard Library includes
#include <string.h>
#include <iostream>
#include <algorithm>

// Plugin specific - generated by cmake and contains the directory EmbeddedRessources.h
#include <EmbeddedResources.h>

// Orthanc Includes
#include "../Common/OrthancPluginCppWrapper.h"

// Preprocessor Definitions
#define ORTHANC_SSO_PLUGIN_VERSION "0.1"

// Global variables in the Orthanc Plugin
static OrthancPluginContext* context_ = NULL;
static std::string folder_;


extern "C"
{
    // Serve the http file
    static OrthancPluginErrorCode ServePriviledgeAdministration(OrthancPluginRestOutput* output,
                                                    const char* url,
                                                    const OrthancPluginHttpRequest* request)
    {
        // If it is not a get request -> Send error code
        if (request->method != OrthancPluginHttpMethod_Get)
        {
          OrthancPluginSendMethodNotAllowed(context_, output, "GET");
          return OrthancPluginErrorCode_Success;
        }

        // Try to load and serve ressource
        try
        {
            // Load the file
            std::string file_resource;
            Orthanc::EmbeddedResources::GetFileResource(file_resource, Orthanc::EmbeddedResources::PRIVILEDGE_ADMINISTRATION);

            // Send the response
            const char* resource = file_resource.size() ? file_resource.c_str() : NULL;
            OrthancPluginAnswerBuffer(context_, output, resource, file_resource.size(), "html");
        }
        // If loading fails
        catch (std::runtime_error&)
        {
            // Send an error response
            std::string s = "Unknown static resource in plugin: " + std::string(request->groups[0]);
            OrthancPluginLogError(context_, s.c_str());
            OrthancPluginSendHttpStatusCode(context_, output, 404);
            return OrthancPluginErrorCode;
        }

        // Return Success
        return OrthancPluginErrorCode_Success;
    }

    // Plugin initialization
    // register the callbacks
    ORTHANC_PLUGINS_API int32_t OrthancPluginInitialize(OrthancPluginContext* c)
    {
        // Set the global context variable
        context_ = c;

        // Get the explorer file
        std::string explorer;
        Orthanc::EmbeddedResources::GetFileResource(explorer, Orthanc::EmbeddedResources::ORTHANC_EXPLORER);
        // Extend Orthanc explorer by the additional java script code provided by OrthancExplorer.js
        OrthancPluginExtendOrthancExplorer(context_, explorer.c_str());

        // Use A REST callback to serve static files
        OrthancPluginLogInfo(context_, "Serving static resources (standalone build)");
        OrthancPluginRegisterRestCallback(context_, "/priviledgeAdministration", ServePriviledgeAdministration);
        return 0;
    }


    // Plugin destructor
    ORTHANC_PLUGINS_API void OrthancPluginFinalize()
    {
        OrthancPluginLogWarning(context_, "OrthancAccessRights plugin is finalizing");
    }


    // Serve Plugin Name
    ORTHANC_PLUGINS_API const char* OrthancPluginGetName()
    {
        return "OrthancAccessRights";
    }

    // Serve Plugin version
    ORTHANC_PLUGINS_API const char* OrthancPluginGetVersion()
    {
        return ORTHANC_SSO_PLUGIN_VERSION;
    }
}
